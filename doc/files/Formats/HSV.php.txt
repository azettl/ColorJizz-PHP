<?php
/**
 * This file is part of the ColorJizz package.
 *
 * (c) Mikee Franklin <mikeefranklin@gmail.com>
 */

namespace MischiefCollective\ColorJizz\Formats;

use MischiefCollective\ColorJizz\ColorJizz;
use MischiefCollective\ColorJizz\Exceptions\InvalidArgumentException;

/**
 * HSV represents the HSV color format
 *
 * @author Mikee Franklin <mikeefranklin@gmail.com>
 */
class HSV extends ColorJizz
{

    /**
     * The hue
     * @var float
     */
    private $_hue;

    /**
     * The saturation
     * @var float
     */
    private $_saturation;

    /**
     * The value
     * @var float
     */
    private $_value;

    /**
     * Returns the hue
     *
     * @return float
     */
    public function getHue()
    {
      return $this->_hue;
    }

    /**
     * Returns the saturation
     *
     * @return float
     */
    public function getSaturation()
    {
      return $this->_saturation;
    }

    /**
     * sets the saturation
     *
     * @param float
     */
    public function setSaturation($saturation)
    {
      $this->_saturation = $saturation;
    }

    /**
     * Returns the value
     *
     * @return float
     */
    public function getValue()
    {
      return $this->_value;
    }

    /**
     * Create a new HSV color
     *
     * @param float $hue The hue (0-1)
     * @param float $saturation The saturation (0-1)
     * @param float $value The value (0-1)
     */
    private function __construct($hue, $saturation, $value)
    {
        $this->toSelf = "toHSV";
        $this->_hue = $hue;
        $this->_saturation = $saturation;
        $this->_value = $value;
    }

    /**
     * Create a new HSV color
     *
     * @param float $hue The hue (0-1)
     * @param float $saturation The saturation (0-1)
     * @param float $value The value (0-1)
     *
     * @return MischiefCollective\ColorJizz\Formats\HSV the color in HSV format
     */
    public static function create($hue, $saturation, $value)
    {
        return new HSV($hue, $saturation, $value);
    }

    /**
     * Convert the color to Hex format
     *
     * @return MischiefCollective\ColorJizz\Formats\Hex the color in Hex format
     */
    public function toHex()
    {
        return $this->toRGB()->toHex();
    }

    /**
     * Convert the color to RGB format
     *
     * @return MischiefCollective\ColorJizz\Formats\RGB the color in RGB format
     */
    public function toRGB()
    {
        $hue        = $this->_hue / 360;
        $saturation = $this->_saturation / 100;
        $value      = $this->_value / 100;

        if ($saturation == 0) {
            $red   = $value * 255;
            $green = $value * 255;
            $blue  = $value * 255;
        } else {
            $var_h = $hue * 6;
            $var_i = floor($var_h);
            $var_1 = $value * (1 - $saturation);
            $var_2 = $value * (1 - $saturation * ($var_h - $var_i));
            $var_3 = $value * (1 - $saturation * (1 - ($var_h - $var_i)));

            if ($var_i == 0) {
                $var_r = $value;
                $var_g = $var_3;
                $var_b = $var_1;
            } elseif ($var_i == 1) {
                $var_r = $var_2;
                $var_g = $value;
                $var_b = $var_1;
            } elseif ($var_i == 2) {
                $var_r = $var_1;
                $var_g = $value;
                $var_b = $var_3;
            } elseif ($var_i == 3) {
                $var_r = $var_1;
                $var_g = $var_2;
                $var_b = $value;
            } else {
                if ($var_i == 4) {
                    $var_r = $var_3;
                    $var_g = $var_1;
                    $var_b = $value;
                } else {
                    $var_r = $value;
                    $var_g = $var_1;
                    $var_b = $var_2;
                }
            }

            $red   = $var_r * 255;
            $green = $var_g * 255;
            $blue  = $var_b * 255;
        }

        return RGB::create($red, $green, $blue);
    }

    /**
     * Convert the color to XYZ format
     *
     * @return MischiefCollective\ColorJizz\Formats\XYZ the color in XYZ format
     */
    public function toXYZ()
    {
        return $this->toRGB()->toXYZ();
    }

    /**
     * Convert the color to Yxy format
     *
     * @return MischiefCollective\ColorJizz\Formats\Yxy the color in Yxy format
     */
    public function toYxy()
    {
        return $this->toXYZ()->toYxy();
    }

    /**
     * Convert the color to HSV format
     *
     * @return MischiefCollective\ColorJizz\Formats\HSV the color in HSV format
     */
    public function toHSV()
    {
        return $this;
    }

    /**
     * Convert the color to CMY format
     *
     * @return MischiefCollective\ColorJizz\Formats\CMY the color in CMY format
     */
    public function toCMY()
    {
        return $this->toRGB()->toCMY();
    }

    /**
     * Convert the color to CMYK format
     *
     * @return MischiefCollective\ColorJizz\Formats\CMYK the color in CMYK format
     */
    public function toCMYK()
    {
        return $this->toCMY()->toCMYK();
    }

    /**
     * Convert the color to CIELab format
     *
     * @return MischiefCollective\ColorJizz\Formats\CIELab the color in CIELab format
     */
    public function toCIELab()
    {
        return $this->toRGB()->toCIELab();
    }

    /**
     * Convert the color to HSL format
     *
     * @return MischiefCollective\ColorJizz\Formats\CIELab the color in HSL format
     */
    public function toHSL()
    {
        return $this->toRGB()->toHSL();
    }

    /**
     * Convert the color to CIELCh format
     *
     * @return MischiefCollective\ColorJizz\Formats\CIELCh the color in CIELCh format
     */
    public function toCIELCh()
    {
        return $this->toCIELab()->toCIELCh();
    }

    /**
     * A string representation of this color in the current format
     *
     * @return string The color in format: $hue,$saturation,$value
     */
    public function __toString()
    {
        return sprintf('%01.0f°, %01.0f%%, %01.0f%%', $this->_hue, $this->_saturation, $this->_value);
    }

    /**
     * A url string representation of this color in the current format
     *
     * @return string The color in format: $hue_$saturation_$value
     */
    public function toUrlString()
    {
        return sprintf('%01.0f_%01.0f_%01.0f', $this->_hue, $this->_saturation, $this->_value);
    }

    /**
     * A css string representation of this color in the current format
     *
     * @return string The color in format: rgb(R, G, B)
     */
    public function toCssString()
    {
        return $this->toRGB()->toCssString();
    }

    /**
     * Create a new hsv from a string.
     *
     * @param string $str Can be a color name or string hsv value (i.e. "h,s,v" or "hsv(h,s,v)")
     *
     * @return MischiefCollective\ColorJizz\Formats\HSV the color in hsv format
     */
    public static function createFromString($str)
    {
        $str = str_replace(
          array('hsv', '(', ')', ';', '°', '%'),
          '',
          ($str)
        );
        $str = str_replace(
          array('hsv', '(', ')', ';', '°', '%'),
          '',
          strtolower($str)
        );

        $oHSV = explode(',', $str);

        if (count($oHSV) == 3) {
            if(self::is_digits(trim($oHSV[0])) && self::is_digits(trim($oHSV[1])) && self::is_digits(trim($oHSV[2]))) {

              return HSV::create(trim($oHSV[0]), trim($oHSV[1]), trim($oHSV[2]));
            }
        }

        throw new InvalidArgumentException(sprintf('Parameter str is an invalid hsv string (%s)', $str));
    }

    /**
     * Checks if a string only contains digits
     *
     * @param string $str
     *
     * @return bool   true if its only digits
     */
    private static function is_digits($element) {
    	return !preg_match ("/[^0-9]/", $element);
    }
}

